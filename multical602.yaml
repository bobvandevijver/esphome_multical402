##########################################################
#                ESPHOME CUSTOM COMPONENT                #
#                          FOR                           #
# KAMSTRUP MULTICAL 402/403 & 602 DISTRICT HEATING METER #
##########################################################


#############################################
#   Substitutions section contains all the  #
# user/device specific configurable details #
#############################################
substitutions:
  device_name: multical602
  friendly_name: District Heating
  device_description: District Heating Multical 602
  platform: ESP8266
  board: d1_mini
  wifi: !secret wifi_ssid_tp
  password: !secret wifi_password_tp
  ip: !secret static_ip_multical602
  gateway: !secret gateway
  ha_api_key: !secret api_key
  ap_password: !secret wifi_ap_password
  ota_password: !secret multical602_ota_password
  # uart_tx: '1' # GPIO1 = D10 - TX pin for hardware UART on ESP8266
  # uart_rx: '3' # GPIO3 = D9  - TX pin for hardware UART on ESP8266
  uart_tx: '5' # GPIO5 = D1 - Typical TX pin for software UART on ESP8266
  uart_rx: '4' # GPIO4 = D2 - Typical RX pin for software UART on ESP8266
  # uart_tx: '17' # GPIO17 = D27 - Default TX pin for hardware UART#2 on ESP32 modules
  # uart_rx: '16' # GPIO16 = D25 - Default RX pin for hardware UART#2 on ESP32 modules
  stop_bit: '2' # Set to 2 for Multical 402/602. Set to 1 for Multical403 meter ?
  update_millis: '300000' # Update interval in milliseconds (5 min. interval)


###############################################
#               Main YAML block               #
# You should not need to edit below this line #
############################################### 
esphome:
  name: ${device_name}
  friendly_name: ${friendly_name}
  comment: ${device_description}
  platform: ${platform}
  board: ${board}
  includes:
    - kmp.h
    - multical402.h
  on_boot:
    priority: -100
    then:
      - wait_until:
          api.connected:
      - delay: 20s  
      - lambda: |-
          ESP_LOGI("custom", "API connect + 20 seconds. delta_base current value: %f", id(delta_base));
      - delay: 60s
      - lambda: |-
          ESP_LOGI("custom", "API connect + 80 seconds. The value of delta_base is currently: %f", id(delta_base));
          if ((id(delta_base) == -1) && (!isnan(id(m_energy).raw_state)) && (!isnan(id(m_energy_high).raw_state))) {
            id(temp) = roundf(id(m_energy).state * 1000);
            id(energy_lowres_2digits) = id(temp) / 1000;
            id(delta_base) = id(energy_lowres_2digits) - id(m_energy_high).state;
            ESP_LOGI("custom", "delta_base has now been calculated to: %f MWh", id(delta_base));
          } else if (id(delta_base) == -1) {
            ESP_LOGW("custom", "First attempt - delta_base could NOT be calculated. Value still undefined: %f", id(delta_base));
          }
      - lambda: |-
          ESP_LOGI("custom", "Wait for %d seconds before attempting second and final delta_base calculation", (int(${update_millis})/1000));
      - delay: !lambda "return ${update_millis};"
      - lambda: |-
          if ((id(delta_base) == -1) && (!isnan(id(m_energy).raw_state)) && (!isnan(id(m_energy_high).raw_state))) {
            id(temp) = roundf(id(m_energy).state * 1000);
            id(energy_lowres_2digits) = id(temp) / 1000;
            id(delta_base) = id(energy_lowres_2digits) - id(m_energy_high).state;
            ESP_LOGI("custom", "Final attempt - delta_base has now been calculated to: %f MWh", id(delta_base));
          } else if (id(delta_base) == -1) {
            ESP_LOGE("custom", "Final attempt - delta_base could NOT be calculated. Value still undefined: %f", id(delta_base));
          }

# Multical UART
uart:
  - id: uart_bus
    tx_pin: ${uart_tx}
    rx_pin: ${uart_rx}
    # 2400 baud not working on the Multical 602 meter
    baud_rate: 1200
    data_bits: 8
    parity: NONE
    # Multical 402/602 uses 2 stop bits
    # Multical 403 uses 1 stop bit ?
    stop_bits: ${stop_bit}
    #debug:

# Enable logging
logger:

  
# Enable Home Assistant API
api:
  encryption:
    key: ${ha_api_key}


ota:
  password: ${ota_password}


wifi:
  ssid: ${wifi}
  password: ${password}
  fast_connect: true
  manual_ip:
    static_ip: ${ip}
    gateway: ${gateway}
    subnet: 255.255.255.0
  # Enable fallback hotspot (captive portal) in case WiFi connection fails
  ap:
    ssid: ${friendly_name} FB Hotspot
    password: ${ap_password}


captive_portal:


web_server:
  port: 80


globals:
  # Define delta_base with -1 as initial value. delta_base will be calculated upon ESPHome boot
  # If first calculation attempt fails, code will wait for the defined wait period between registers reads and retry once more
  # If the delta_base can't be calculated, then code will instead return the 'normal' low resolution register value
  #
  # Double variables needed as float will not cope with the fraction sizes for the energy registers 
  - id: delta_base
    type: double
    restore_value: no
    initial_value: "-1"
  - id: energy_lowres_2digits
    type: double
    restore_value: no
    initial_value: "0"
  - id: temp
    type: double
    restore_value: no
    initial_value: "0"


# Multical Custom Sensor (first variable is update interval in ms; 3600000 is 1 hour)
# Set to 30000 ms = 5 min. update interval
custom_component:
  - lambda: |-
      auto multical402 = new Multical402(
        ${update_millis},
        id(uart_bus),
        id(m_energy),
        id(m_power),
        id(m_tin),
        id(m_tout),
        id(m_tdiff),
        id(m_flow),
        id(m_volume),
        id(m_energy_high));
      App.register_component(multical402);
      return {multical402};
    components:
      - id: multical


binary_sensor:
  - platform: status
    name: "Node status"
  

sensor:
# Uptime sensor / WiFi strength in db and percentage
- platform: uptime
  name: "Uptime sensor"

- platform: wifi_signal
  id: wifi_strength_db
  name: "WiFi strength db"
  update_interval: 60s
  entity_category: "diagnostic"

# Reports the WiFi signal strength in percentage
- platform: copy
  source_id: wifi_strength_db
  name: "WiFi strength pct."
  filters:
    - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
  unit_of_measurement: "%"
  entity_category: "diagnostic"

# Calculated high resolution Energy sensor - delta base value added to the raw high resolution energy register
# This high resolution sensor will provide 2 decimals resolution -> 0.01 kWh
# If high resolution sensor for some reason can't be calculated (e.g. missing register data), it will return the low resolution energy register value instead  
- name: "Energy HiRes"
  platform: template
  id: m_energy_hires
  update_interval: 60s
  icon: "mdi:lightning-bolt"
  unit_of_measurement: MWh
  accuracy_decimals: 5
  state_class: "total_increasing"
  device_class: "energy"
  lambda: |-
      if ((!isnan(id(m_energy_high).raw_state)) && id(delta_base) != -1) {
        ESP_LOGI("custom", "delta_base set. Return calculated energy high resolution value: %f MWh", (id(m_energy_high).state + id(delta_base)));
        return (id(m_energy_high).state + id(delta_base));
      } else {
        id(temp) = roundf(id(m_energy).state * 1000);
        id(energy_lowres_2digits) = id(temp) / 1000;
        ESP_LOGW("custom", "delta_base NOT set. Return standard low resolution energy register value: %f MWh", id(energy_lowres_2digits));
        return id(energy_lowres_2digits);
      }

# Multical Custom Sensors
# High resolution energy register in MWh with five significant decimals
# Sensor is base for Multical Energy HiRes sensor calculation
# Sensor could be made internal, as it's not really needed in HA
# Register returns a total increasing value with an unknown offset
# Currently it's unknown when resister is reset and how to trigger this (no optical sensor on module for xx hours ?)
- name: "Energy HiRes raw"
  platform: template
  id: m_energy_high
  #internal: true
  icon: "mdi:lightning-bolt"
  unit_of_measurement: MWh
  accuracy_decimals: 5
  state_class: "total_increasing"
  device_class: "energy"
  filters:
    - multiply: 0.000001

# Multical 602 doesn't report additional significant decimals for this register -> Resolution is only 1 kWh
- name: "Energy"
  platform: template
  id: m_energy
  icon: "mdi:lightning-bolt"
  unit_of_measurement: MWh
  accuracy_decimals: 3
  state_class: "total_increasing"
  device_class: "energy"
 
- name: "Volume"
  platform: template
  id: m_volume
  unit_of_measurement: m3
  accuracy_decimals: 2
  state_class: "measurement"

- name: "Temperature In"
  platform: template
  id: m_tin
  icon: "mdi:thermometer"
  unit_of_measurement: °C
  accuracy_decimals: 2
  state_class: "measurement"
  device_class: "temperature"

- name: "Temperature Out"
  platform: template
  id: m_tout
  icon: "mdi:thermometer"
  unit_of_measurement: °C
  accuracy_decimals: 2
  state_class: "measurement"
  device_class: "temperature"

- name: "Temperature Diff"
  platform: template
  id: m_tdiff
  icon: "mdi:thermometer"
  unit_of_measurement: °C
  accuracy_decimals: 2
  state_class: "measurement"
  device_class: "temperature"

- name: "Power"
  platform: template
  id: m_power
  icon: "mdi:flash"
  unit_of_measurement: kW
  accuracy_decimals: 1
  state_class: "measurement"
  device_class: "power"

- name: "Flow"
  platform: template
  id: m_flow
  unit_of_measurement: l/h
  accuracy_decimals: 0
  state_class: "measurement"